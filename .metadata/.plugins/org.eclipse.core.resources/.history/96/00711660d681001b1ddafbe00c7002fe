package com.scotiathon.voucher.service.impl;

import java.io.InputStreamReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.opencsv.CSVReader;
import com.opencsv.bean.CsvToBean;
import com.opencsv.bean.HeaderColumnNameTranslateMappingStrategy;
import com.scotiathon.voucher.dto.VoucherDTO;
import com.scotiathon.voucher.dto.VoucherResponseDTO;
import com.scotiathon.voucher.error.ErrorEnum;
import com.scotiathon.voucher.exception.CustomException;
import com.scotiathon.voucher.service.VoucherService;

import lombok.extern.java.Log;

@Log
@Service("VoucherServiceExclusions")
public class VoucherServiceExclusionsImpl implements VoucherService {

	@Override
	public VoucherResponseDTO storeAndValidateVouchers(MultipartFile vouchers) {

		if (!Optional.ofNullable(vouchers).isPresent())
			throw new CustomException(ErrorEnum.VOUCHERS_FILE_NOT_FOUND, HttpStatus.NOT_FOUND);

		log.info("-----Starting processing vourchers----------");
		List<VoucherDTO> listOfExclusions = convertCSVToList(vouchers);
		return null;
	}

	private List<VoucherDTO> convertCSVToList(MultipartFile vouchers) {
		try {

			HeaderColumnNameTranslateMappingStrategy<VoucherDTO> strategy = new HeaderColumnNameTranslateMappingStrategy<>();
			strategy.setType(VoucherDTO.class);
			strategy.setColumnMapping(mappingForCSV());

			Reader reader = new InputStreamReader(vouchers.getInputStream());
			CSVReader csvReader = new CSVReader(reader);
			CsvToBean<VoucherDTO> csv = new CsvToBean<>();
			csv.setCsvReader(csvReader);
			csv.setMappingStrategy(strategy);
			return csv.parse();
		} catch (Exception e) {
			log.log(Level.SEVERE, "Error while processing csv");
			throw new CustomException(ErrorEnum.ERROR_WHILE_VALIDATING_EXCEL, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	private Map<String, String> mappingForCSV() {
		Map<String, String> mapping = new HashMap<>();
		mapping.put("Voucher ID", "voucherId");
		mapping.put("Business Unit", "bu");
		mapping.put("Lines Entered", "linesEntered");
		mapping.put("Voucher Source", "voucherSource");
		mapping.put("Voucher Created by User", "voucherCreatedBy");
		mapping.put("Voucher Created on", "voucherCreatedOn");
		mapping.put("Post Status", "postStatus");
		mapping.put("Entry Status", "entryStatus");
		mapping.put("Supplier ID", "supplierId");
		mapping.put("Short Supplier Name", "shortSupplierName");
		mapping.put("Supplier Name", "supplierName");
		mapping.put("Invoice Number", "invoiceNumber");
		mapping.put("Invoice Date", "invoiceDate");
		mapping.put("Invoice Received", "invoiceReceived");
		mapping.put("Voucher Amount", "voucherAmount");
		mapping.put("Voucher Currency", "voucherCurrency");
		mapping.put("Approval Status", "approvalStatus");
		mapping.put("Age", "age");
		return mapping;


}
