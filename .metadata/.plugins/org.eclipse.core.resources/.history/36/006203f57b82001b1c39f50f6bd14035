package com.scotiathon.voucher.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.scotiathon.voucher.dto.PassedVoucherDTO;
import com.scotiathon.voucher.dto.ReasonEscalationDTO;
import com.scotiathon.voucher.dto.StatusDTO;
import com.scotiathon.voucher.dto.VoucherResponseDTO;
import com.scotiathon.voucher.entity.PassedVoucher;
import com.scotiathon.voucher.entity.ReasonEscalation;
import com.scotiathon.voucher.entity.Status;
import com.scotiathon.voucher.repository.ReasonEscalationRepository;
import com.scotiathon.voucher.repository.StatusRepository;
import com.scotiathon.voucher.repository.SuccessfulVoucherRepository;
import com.scotiathon.voucher.service.VoucherAssignmentAndClerkProcessing;

@Service
public class VoucherAssignmentAndClerkProcessingImpl implements VoucherAssignmentAndClerkProcessing {

	@Autowired
	private SuccessfulVoucherRepository successfulVoucherRepository;

	@Autowired
	private StatusRepository statusRepository;

	@Autowired
	private ReasonEscalationRepository reasonEscalationRepository;

	@Autowired
	private ModelMapper modelMapper;

	@Override
	public List<PassedVoucherDTO> getPassedVouchers() {
		List<PassedVoucher> passedVouchers = successfulVoucherRepository.selectAllExceptNotApplicable();
		List<PassedVoucherDTO> passedVouchersDTO = new ArrayList<>();
		passedVouchers.stream().forEach(
				passedVoucher -> passedVouchersDTO.add(modelMapper.map(passedVoucher, PassedVoucherDTO.class)));
		return passedVouchersDTO;
	}

	@Transactional
	@Override
	public VoucherResponseDTO voucherAssigment(List<PassedVoucherDTO> vouchersToBeAssigned, Long clientId) {
		List<Long> listOfVouchers = new ArrayList<>();
		vouchersToBeAssigned.stream().forEach(passedVoucher -> listOfVouchers.add(passedVoucher.getId()));

		successfulVoucherRepository.updateAssignment(clientId, listOfVouchers);
		return new VoucherResponseDTO(null, true);
	}

	@Override
	public List<PassedVoucherDTO> getPassedVouchersByclerk(Long clientId) {
		List<PassedVoucher> passedVouchers = successfulVoucherRepository.findByClientId(clientId);
		List<PassedVoucherDTO> passedVouchersDTO = new ArrayList<>();
		passedVouchers.stream().forEach(
				passedVoucher -> passedVouchersDTO.add(modelMapper.map(passedVoucher, PassedVoucherDTO.class)));
		return passedVouchersDTO;
	}

	@Override
	public List<StatusDTO> getVoucherStatuses() {
		List<Status> statuses = statusRepository.findAll();
		List<StatusDTO> statusDTO = new ArrayList<>();
		statuses.stream().forEach(status -> statusDTO.add(modelMapper.map(status, StatusDTO.class)));
		return statusDTO;
	}

	@Override
	public List<ReasonEscalationDTO> getVoucherReasonsEscalation() {
		List<ReasonEscalation> statuses = reasonEscalationRepository.findAll();
		List<ReasonEscalationDTO> statusDTO = new ArrayList<>();
		statuses.stream().forEach(status -> statusDTO.add(modelMapper.map(status, ReasonEscalationDTO.class)));
		return statusDTO;
	}

}
